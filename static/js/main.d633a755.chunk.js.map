{"version":3,"sources":["SearchBox.js","Card.js","CardList.js","Scroll.js","App.js","About.js","serviceWorker.js","Nav/Nav.js","NotFound.js","index.js"],"names":["SearchBox","_ref","searchChange","react_default","a","createElement","type","placeholder","className","onChange","Card","name","email","city","id","src","concat","alt","style","borderRadius","CardList","avatars","map","i","src_Card","key","address","Scroll","props","overflowY","height","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this2","fetch","then","response","json","users","console","log","_this$state","filterdAvatars","filter","avatar","toLowerCase","includes","length","src_SearchBox","src_Scroll","src_CardList","Component","About","Boolean","window","location","hostname","match","Nav","linkStyle","textDecoration","color","react_router_dom","to","NotFound","pathname","ReactDOM","render","src_Nav_Nav","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d633a755.chunk.js","sourcesContent":["import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div>\n      <input\n        type=\"search\"\n        placeholder=\"Search Avatars\"\n        className=\"pa3 mb3 b--gray ba\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from \"react\";\n\nconst Card = ({ name, email, city, id }) => {\n  const borderRadius = {\n    borderRadius: \"50%\"\n  };\n  return (\n    <div className=\"tc dib ma2 pa3 br3 shadow-3 grow pointer\">\n      <img\n        src={`https://api.adorable.io/avatars/150/${id}`}\n        alt=\"avatars\"\n        style={borderRadius}\n      />\n      <div>\n        <h2>{name}</h2>\n        <p className=\"f4\">{email}</p>\n        <p className=\"f5\">{city}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from \"react\";\nimport Card from \"./Card\";\n\nconst CardList = ({ avatars }) => {\n  return (\n    <div>\n      {avatars.map((map, i) => {\n        return (\n          <Card\n            key={i}\n            id={avatars[i].id}\n            name={avatars[i].name}\n            email={avatars[i].email}\n            city={avatars[i].address.city}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\n\nconst Scroll = props => {\n  return (\n    <div\n      style={{\n        overflowY: \"scroll\",\n        height: \"800px\",\n        border: \"1px solid #ddd\"\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport SearchBox from \"./SearchBox\";\nimport CardList from \"./CardList\";\nimport Scroll from \"./Scroll\";\nimport \"./App.css\";\n// import { avatars } from \"./avatars.js\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      avatars: [],\n      searchfield: \"\"\n    };\n  }\n\n  onSearchChange = event => {\n    this.setState({ searchfield: event.target.value });\n  };\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then(response => response.json())\n      .then(users => this.setState({ avatars: users }));\n  }\n\n  render() {\n    console.log(\"render\");\n    const { avatars, searchfield } = this.state;\n\n    const filterdAvatars = avatars.filter(avatar => {\n      return avatar.name.toLowerCase().includes(searchfield.toLowerCase());\n    });\n\n    return !avatars.length ? (\n      <div className=\"tc f2\">\n        <h1>Opps!</h1>\n        <p>Loading Now...</p>\n      </div>\n    ) : (\n      <div className=\"tc\">\n        <SearchBox searchChange={this.onSearchChange} />\n        <Scroll>\n          <CardList avatars={filterdAvatars} />\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\n\nconst About = () => (\n  <div className=\"pa4 tc br3 ma2\">\n    <h1>Adorable Avatar</h1>\n    <p>\n      サーチボックスに入力された文字にマッチするアバター達の画像を表示することができます。\n    </p>\n  </div>\n);\n\nexport default About;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport \"./Nav.css\";\n\nconst Nav = () => {\n  const linkStyle = {\n    textDecoration: \"none\",\n    color: \"#333\"\n  };\n  return (\n    <nav className=\"nav\">\n      <Link style={linkStyle} to=\"/\">\n        <h1 className=\"logo\">Adorable Avatar</h1>\n      </Link>\n      <ul className=\"nav-item-list\">\n        <Link style={linkStyle} to=\"/about\">\n          <li className=\"nav-item\">About</li>\n        </Link>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NotFound = props => {\n  return (\n    <div className=\"tc grow\">\n      <h1>\n        No match for <i>{props.location.pathname}</i>\n      </h1>\n      <Link to=\"/\">Go Back</Link>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport About from \"./About\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Nav from \"./Nav/Nav\";\nimport NotFound from \"./NotFound\";\n\nReactDOM.render(\n  <Router>\n    <Nav />\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/about\" component={About} />\n      <Route component={NotFound} />\n    </Switch>\n  </Router>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}