{"version":3,"sources":["components/searchbox/search-box.component.jsx","components/card/card.component.jsx","components/cardList/card-list.component.jsx","components/scroll/scroll.component.jsx","components/spinner/spinner.component.jsx","App.js","pages/about/about.component.jsx","serviceWorker.js","components/nav/nav.component.jsx","pages/not-found.component.jsx","components/button/button.component.jsx","components/avatar-details/avatar-details.component.jsx","index.js"],"names":["SearchBox","_ref","searchChange","react_default","a","createElement","className","type","placeholder","onChange","Card","name","email","id","react_router_dom","to","concat","src","alt","CardList","avatars","map","_ref2","otherProps","Object","esm_extends","card_component","assign","key","uuid","Scroll","props","children","override","display","margin","borderColor","Spinner","_useState","useState","loading","slicedToArray","style","marginTop","dist","sizeUnit","size","color","App","_useState2","setAvatars","_useState3","_useState4","searchfield","setSearchField","useEffect","asyncToGenerator","regenerator_default","mark","_callee","responseAvatar","jsonAvatar","wrap","_context","prev","next","fetch","sent","json","stop","apply","this","arguments","getAvatars","filterdAvatars","filter","avatar","toLowerCase","includes","length","Fragment","search_box_component","e","target","value","scroll_component","card_list_component","spinner_component","About","Boolean","window","location","hostname","match","Nav","NotFound","textAlign","pathname","Button","AvatarDetails","setAvatar","params","getAvatar","username","phone","website","button_component","ReactDOM","render","basename","process","nav_component","react_router","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d2f770b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './search-box.styles.scss';\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"search-box\">\n      <input\n        type=\"search\"\n        placeholder=\"アバターを検索\"\n        onChange={searchChange}\n        className=\"search-box-input\"\n      />\n      <p>アルファベットでタイプしてみよう！</p>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './card.styles.scss';\n\nconst Card = ({ name, email, id }) => {\n  return (\n    <Link to={`/avatars/${id}`}>\n      <div className=\"card\">\n        <img\n          src={`https://robohash.org/${id}?set=set4`}\n          alt=\"avatars\"\n          className=\"card-image\"\n        />\n        <div className=\"card-profile\">\n          <h2 className=\"card-name\">{name}</h2>\n          <p className=\"card-email\">{email}</p>\n        </div>\n      </div>\n    </Link>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card.component';\n\nimport uuid from 'uuid/v4';\n\nimport './card-list.styles.scss';\n\nconst CardList = ({ avatars }) => {\n  return (\n    <div className=\"card-list\">\n      {avatars.map(({ ...otherProps }) => {\n        return <Card key={uuid()} {...otherProps} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\nimport './scroll.styles.scss';\n\nconst Scroll = props => {\n  return <div className=\"scroll\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React, { useState } from 'react';\nimport { ClipLoader } from 'react-spinners';\n\nconst override = {\n  display: 'block',\n  margin: '0 auto',\n  borderColor: 'red'\n};\n\nconst Spinner = () => {\n  const [loading] = useState(true);\n\n  return (\n    <div className=\"sweet-loading\" style={{ marginTop: '100px' }}>\n      <ClipLoader\n        style={override}\n        sizeUnit={'px'}\n        size={80}\n        color={'#81bef1'}\n        loading={loading}\n      />\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useState, useEffect } from 'react';\nimport SearchBox from './components/searchbox/search-box.component';\nimport CardList from './components/cardList/card-list.component';\nimport Scroll from './components/scroll/scroll.component';\nimport './App.css';\nimport Spinner from './components/spinner/spinner.component';\n\nfunction App() {\n  const [avatars, setAvatars] = useState([]);\n  const [searchfield, setSearchField] = useState('');\n\n  useEffect(() => {\n    const getAvatars = async () => {\n      const responseAvatar = await fetch(\n        'https://jsonplaceholder.typicode.com/users'\n      );\n      const jsonAvatar = await responseAvatar.json();\n\n      setAvatars(jsonAvatar);\n    };\n\n    getAvatars();\n  }, []);\n\n  const onSearchChange = e => {\n    setSearchField(e.target.value);\n  };\n\n  const filterdAvatars = avatars.filter(avatar => {\n    return avatar.name.toLowerCase().includes(searchfield.toLowerCase());\n  });\n\n  return (\n    <div className=\"App\">\n      {avatars.length ? (\n        <React.Fragment>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <CardList avatars={filterdAvatars} />\n          </Scroll>\n        </React.Fragment>\n      ) : (\n        <div className=\"App\">\n          <Spinner />\n          <p>Loading Now...</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\n\nimport './about.styles.scss';\n\nconst About = () => (\n  <div className=\"about\">\n    <h1 className=\"title\">Adorable Avatar</h1>\n    <p className=\"description\">\n      サーチボックスに入力された文字にマッチするアバター達の画像を表示することができます。\n    </p>\n  </div>\n);\n\nexport default About;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './nav.styles.scss';\n\nconst Nav = () => {\n  return (\n    <nav className=\"nav\">\n      <Link to=\"/\">\n        <h1 className=\"logo\">Adorable Avatar</h1>\n      </Link>\n      <ul className=\"nav-item-list\">\n        <Link to=\"/about\">\n          <li className=\"nav-item\">アプリについて</li>\n        </Link>\n      </ul>\n    </nav>\n  );\n};\n\nexport default Nav;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NotFound = props => {\n  return (\n    <div style={{ textAlign: 'center' }}>\n      <h1>\n        No match for <i>{props.location.pathname}</i>\n      </h1>\n      <Link to=\"/\">Go Back</Link>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './button.styles.scss';\n\nconst Button = props => (\n  <Link to=\"/\">\n    <button className=\"button\">{props.children}</button>\n  </Link>\n);\n\nexport default Button;\n","import React, { useState, useEffect } from 'react';\nimport Spinner from '../spinner/spinner.component';\nimport Button from '../button/button.component';\n\nimport './avatar-details.styles.scss';\n\nconst AvatarDetails = ({ match }) => {\n  const [avatar, setAvatar] = useState([]);\n\n  useEffect(() => {\n    const getAvatar = async () => {\n      const responseAvatar = await fetch(\n        `https://jsonplaceholder.typicode.com/users/${match.params.id}`\n      );\n      const jsonAvatar = await responseAvatar.json();\n\n      setAvatar(jsonAvatar);\n    };\n\n    getAvatar();\n  }, []);\n\n  {\n    const { id, name, username, email, phone, website } = avatar;\n    return id ? (\n      <div className=\"avatar-card\">\n        <img\n          src={`https://robohash.org/${match.params.id}?set=set4`}\n          alt=\"avatars\"\n          className=\"card-image\"\n        />\n\n        <div className=\"avatar-profile\">\n          <h2 className=\"name\">{`name: ${name}`}</h2>\n          <span className=\"username\">{`username: ${username}`}</span>\n          <span>{`Email:  ${email}`}</span>\n          <span>{`Tel:  ${phone}`}</span>\n          <span>{`Web:  ${website}`}</span>\n        </div>\n        <Button> 戻る </Button>\n      </div>\n    ) : (\n      <div className=\"avatar-card spinner\">\n        <Spinner />\n      </div>\n    );\n  }\n};\n\nexport default AvatarDetails;\n/* \n\n\n<div className=\"avatar-card\">\n        <img\n          src={`https://robohash.org/${match.params.id}?set=set4`}\n          alt=\"avatars\"\n          className=\"card-image\"\n        />\n\n        <div className=\"avatar-profile\">\n          <h2 className=\"name\">{`name: ${name}`}</h2>\n          <span className=\"username\">{`username: ${username}`}</span>\n          <span>{`email: ${email}`}</span>\n          <span>{`phone: ${phone}`}</span>\n          <span>{`web: ${website}`}</span>\n        </div>\n      </div>\n\n*/\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport About from './pages/about/about.component';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Nav from './components/nav/nav.component';\nimport NotFound from './pages/not-found.component';\nimport AvatarDetails from './components/avatar-details/avatar-details.component';\n\nReactDOM.render(\n  <Router basename={process.env.PUBLIC_URL}>\n    <Nav />\n    <Switch>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/avatars/:id\" component={AvatarDetails} />\n      <Route path=\"/about\" component={About} />\n      <Route component={NotFound} />>\n    </Switch>\n  </Router>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}